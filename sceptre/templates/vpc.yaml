AWSTemplateFormatVersion: 2010-09-09
Description: VPC with its SNs, RT, IGW, ACLs and DHCP

Parameters:
  Project:
    Description: Name of the project
    Type: String
  Environment:
    Description: Environment where the stack is launched
    Type: String
    AllowedValues:
      - dev
      - prod
  CIDR:
    Description: CIDR of VPC
    Type: String
  1PublicSubnetCIDR:
    Description: CIDR of 1st Public SN
    Type: String
  2PublicSubnetCIDR:
    Description: CIDR of 2nd Public SN
    Type: String
  3PublicSubnetCIDR:
    Description: CIDR of 3rd Public SN
    Type: String
  1PrivateSubnetCIDR:
    Type: String
    Description: CIDR of 1st Private SN
  2PrivateSubnetCIDR:
    Type: String
    Description: CIDR of 2nd Private SN
  3PrivateSubnetCIDR:
    Type: String
    Description: CIDR of 3rd Private SN

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDR
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${Project}-${Environment}-vpc

  1PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 1PublicSubnetCIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub 1st-public-SN-${Project}-${Environment}
  2PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 2PublicSubnetCIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub 2nd-public-SN-${Project}-${Environment}
  3PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 3PublicSubnetCIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub 3rd-public-SN-${Project}-${Environment}

  1PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 1PrivateSubnetCIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub 1st-private-SN-${Project}-${Environment}
  2PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 2PrivateSubnetCIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub 2nd-private-SN-${Project}-${Environment}
  3PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref 3PrivateSubnetCIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub 3rd-private-SN-${Project}-${Environment}

  1PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref 1PublicSubnet
  2PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref 2PublicSubnet
  3PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref 3PublicSubnet

  1PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 1PrivateRouteTable
      SubnetId: !Ref 1PrivateSubnet
  2PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 2PrivateRouteTable
      SubnetId: !Ref 2PrivateSubnet
  3PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 3PrivateRouteTable
      SubnetId: !Ref 3PrivateSubnet

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${Project}-${Environment}-vpc
  IGWAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref IGW

  # Only one NAT for the 1st private SN, since we are using a single instance RDS
  # to keep the costs low. Should use two/three incase one Availability Zone goes down
  1NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  1NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 1NatGatewayEIP.AllocationId
      SubnetId: !Ref 1PublicSubnet
  
  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub public-rt-${Project}-${Environment}
  1PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub 1st-private-rt-${Project}-${Environment}
  2PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub 2nd-private-rt-${Project}-${Environment}
  3PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub 3nd-private-rt-${Project}-${Environment}

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref IGW
  1PrivateNatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref 1PrivateRouteTable
      NatGatewayId: !Ref 1NatGateway
  2PrivateNatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref 2PrivateRouteTable
      NatGatewayId: !Ref 1NatGateway
  3PrivateNatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref 3PrivateRouteTable
      NatGatewayId: !Ref 1NatGateway

# Perhaps private Hosted Zone for development purposes?
# eg IP-limited access to dev.app.com ?

Outputs:
  VpcId:
    Description: VPC id
    Value: !Ref Vpc
    Export:
      Name: !Sub ${AWS::StackName}:VpcId
  VpcCidrBlock:
    Description: VPC CIDR block
    Value: !GetAtt Vpc.CidrBlock
    Export:
      Name: !Sub ${AWS::StackName}:Cidr
  1PublicSubnetId:
    Description: Id of 1st Public SN
    Value: !Ref 1PublicSubnet
    Export:
      Name: !Sub ${AWS::StackName}:1PublicSubnetId
  2PublicSubnetId:
    Description: Id of 2nd Public SN
    Value: !Ref 2PublicSubnet
    Export:
      Name: !Sub ${AWS::StackName}:2PublicSubnetId
  3PublicSubnetId:
    Description: Id of 3rd Public SN
    Value: !Ref 3PublicSubnet
    Export:
      Name: !Sub ${AWS::StackName}:3PublicSubnetId
  1PrivateSubnetId:
    Description: Id of 1st Private SN
    Value: !Ref 1PrivateSubnet
    Export:
      Name: !Sub ${AWS::StackName}:1PrivateSubnetId
  2PrivateSubnetId:
    Description: Id of 2nd Private SN
    Value: !Ref 2PrivateSubnet
    Export:
      Name: !Sub ${AWS::StackName}:2PrivateSubnetId
  3PrivateSubnetId:
    Description: Id of 3rd Private SN
    Value: !Ref 3PrivateSubnet
    Export:
      Name: !Sub ${AWS::StackName}:3PrivateSubnetId