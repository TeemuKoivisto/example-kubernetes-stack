# Base config copied from here https://www.thepolyglotdeveloper.com/2017/03/nginx-reverse-proxy-containerized-docker-applications/

worker_processes 1;

events { worker_connections 1024; }

http {

    sendfile on;
    # include /etc/nginx/mime.types;

    # https://www.techrepublic.com/article/how-to-configure-gzip-compression-with-nginx/
    gzip              on;
    gzip_comp_level   4;
    # Compress data even for clients that are connecting via proxies
    gzip_proxied      any;
    # Nginx won't compress anything smaller than 512 bytes(?)
    gzip_min_length   512;
    # Disable compression for Internet Explorer versions 1-6
    gzip_disable      "MSIE [1-6]\.";
    gzip_types        text/plain text/xml text/css
                      text/comma-separated-values
                      text/javascript
                      application/javascript application/x-javascript
                      application/xml application/atom+xml;

    upstream docker-react-server {
        server my_react_bootstrap:80;
    }

    upstream docker-node-server {
        server my_node_bootstrap:8600;
    }

    access_log      /var/log/nginx/my-website.access.log;
    error_log       /var/log/nginx/my-website.error.log;

    server {
        listen 80 default_server;
        server_name _;
        # return 301 https://$host$request_uri;
        # Local redirection
        return 301 https://$host:9443$request_uri;
    }

    server {
        listen 443 ssl;
        server_name my-website.com;

        # These security settings can be found from here
        # https://www.linode.com/docs/web-servers/nginx/tls-deployment-best-practices-for-nginx/
        server_tokens       off; # Obsfuscate Nginx version to prevent vulnerability scanning
        keepalive_timeout   75; # Reuses https-connections to minimize CPU load

        add_header          Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header          X-Content-Type-Options nosniff;
        add_header          X-Frame-Options SAMEORIGIN;
        add_header          X-XSS-Protection "1; mode=block";

        ssl_certificate     /root/certs/my-website/localhost.crt;
        ssl_certificate_key /root/certs/my-website/localhost.key;
        ssl_ciphers         EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
        # Diffie-Hellman parameter is used to establish secure connections over public channel
        # Yet the key can be public huh
        ssl_dhparam         /root/certs/my-website/dhparam4096.pem;
        ssl_prefer_server_ciphers on;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 10m;
        # ssl_stapling on;
        # ssl_stapling_verify on;
        # ssl_trusted_certificate /root/certs/my-website/cert.crt;

        location /api/ {
            proxy_pass         http://docker-node-server/;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
        location / {
            proxy_pass         http://docker-react-server;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }
}